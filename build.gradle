buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'org.akhikhl.gretty:gretty:2.0.0'
    }
}
apply plugin: 'org.akhikhl.gretty'

apply plugin:"groovy"
apply plugin:"idea"
apply plugin:"war"

configurations {
    all*.exclude group: 'org.slf4j', module: 'slf4j-log4j12'
    all*.exclude group: 'log4j', module: 'log4j'
    all*.exclude group: 'org.apache.logging.log4j', module: 'log4j-slf4j-impl'
}

repositories {
    mavenCentral()
    maven {
        url "http://lightadmin.org/nexus/content/repositories/releases"
    }
}

dependencies {
    compile group: 'org.codehaus.groovy', name: 'groovy-all', version: '2.4.14'

    compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
    compile group: 'org.slf4j', name: 'log4j-over-slf4j', version: '1.7.25'
    compile group: 'org.slf4j', name: 'jcl-over-slf4j', version: '1.7.25'

    compile group: 'org.codehaus.groovy.modules.http-builder', name: 'http-builder', version: '0.7.1'
    compile 'org.lightadmin:lightadmin:1.2.0.RC1'

    def SPRING_VERSION='4.1.6.RELEASE'
    compile group: 'org.springframework', name: 'spring-context', version: SPRING_VERSION
    compile group: 'org.springframework', name: 'spring-web', version: SPRING_VERSION
    compile group: 'org.springframework', name: 'spring-orm', version: SPRING_VERSION
    testCompile group: 'org.springframework', name: 'spring-test', version: SPRING_VERSION

    //compile group: 'org.hibernate', name: 'hibernate-core', version: '5.2.13.Final'
    compile group: 'com.h2database', name: 'h2', version: '1.4.196'

    testCompile group: 'org.spockframework', name: 'spock-spring', version: '1.1-groovy-2.4'
}

test {
    maxParallelForks = Runtime.runtime.availableProcessors()
    outputs.upToDateWhen { false }
}

idea {
    module {
        downloadJavadoc = false
        downloadSources = false

        iml.withXml {
            def node = it.asNode()
            def content = node.component.find { it.'@name' == 'NewModuleRootManager' }.content[0]
            content.sourceFolder.each { sourceFolder ->
                if (sourceFolder.@url?.endsWith('/resources')) {
                    sourceFolder.attributes().with {
                        boolean isTestSource = (remove('isTestSource') == 'true')
                        put('type', isTestSource ? 'java-test-resource' : 'java-resource')
                    }
                }
            }
        }
    }
}

gretty {
    httpPort = 8080
    contextPath = "/"
}
